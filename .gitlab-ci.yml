# .gitlab-ci.yml



stages:
  - lint
  - test
  - build
  - deploy




variables:
  PYTHON_VERSION: "3.9"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip-cache"




# Cache dependencies between jobs
cache:
  paths:
    - .pip-cache/
    - venv/




# Template for Python setup
.python-setup: &python-setup
  before_script:
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt




# Linting job
lint:
  stage: lint
  image: python:${PYTHON_VERSION}
  <<: python-setup
  script:
    - flake8 --max-line-length=100 .py
    - black --check --line-length 100 *.py
  allow_failure: true




# Unit testing job
test:
  stage: test
  image: python:${PYTHON_VERSION}
  <<: *python-setup
  script:
    - pytest --cov=./ --cov-report=xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
    expire_in: 1 week




# Build job - create a simple package
build:
  stage: build
  image: python:${PYTHON_VERSION}
  <<: *python-setup
  script:
    - mkdir -p dist
    - cp Test.py dist/
    - echo "Package created successfully"
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  only:
    - main
    - tags




# Create Docker image
docker_build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE:latest
        docker push $CI_REGISTRY_IMAGE:latest
      fi
  only:
    - main
    - tags




# Deploy to staging
deploy_staging:
  stage: deploy
  image: python:${PYTHON_VERSION}
  <<: *python-setup
  script:
    - echo "Deploying to staging environment"
    - python -c "print('Deployment to staging successful')"
  environment:
    name: staging
  only:
    - main


